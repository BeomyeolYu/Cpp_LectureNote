/*
7.6강 "인라인 함수(Inline Functions)"

- 많은 프로그래머들이 자신의 프로그램을 빠르게 만들고 싶어 하며, Inline 함수를 이용하여 최적화를 시도한다.
*/

#include <iostream>
using namespace std;

int min(int x, int y)     // 간단한 함수의 경우, 변수를 복사하여 선언하고 return 하는 과정이,
{
	return x > y ? y : x; // 계산 부분보다 더 시간이 많이 걸릴 때가 있다. --> 이러한 과정을 줄이기 위해여 inline 사용.
}

inline int max(int x, int y) // inline으로 바꿔주면 함수가 아닌 것처럼 작동한다.
{
	return x < y ? y : x; 
}

int main()
{
/**************** Topic 1 ****************/
	cout << min(5, 6) << endl;
	cout << min(3, 2) << endl;
	// inline을 사용하면 위의 코드가 아래 "처럼" 컴파일이 된다.
	cout << (5 > 6 ? 6 : 5) << endl;
	cout << (3 > 2 ? 2 : 3) << endl;
	// --> 이 경우 함수가 호출될 일도 없고 local variable(ex, int x, int y)가 선언되고 삭제될 일도 없으니 연산이 빠르다.

/**************** Topic 2 ****************/
	/* 주의 사항.
	그러나, inline은 강제로 실행되는 것이 아니라 컴파일러에게 권유하는 정도이다. 즉 모든 함수에 적용 가능한 것이 아니다.
	또한 최근 컴파일의 성능 향상으로 스스로 inline으로 실행하는 것이 더 좋아 보인다고 판단할 경우 inline으로 실행한다.
	또한 inline이 많으면 컴파일 된 프로그램이 커진다. 즉 메모리 데이터 교환하는데 많은 시간이 소요되므로 inline을 사용한 효과를 못 볼 수도 있다.
	많은 오픈소스에서 찾을 수는 있지만, inline을 사용하면 성능이 확실하다 또는 권장한다 하는 것은 아니다. */
	
	/*	홍정모 교수님: 
	개인적으로는 인라인을 쓸 필요가 있는가 생각한다. 
	코딩을 최적화할 때 inline 의존하기 시작하면 힘들어진다.	특히 자신이 연구자라면 최적화를 inline과 같은 코딩 테크닉으로 하는 것은 지양하는 것이 좋다.
	하드 웨어 가속을 받는 방향, 병렬 처리 등 소프트웨어의 구조를 바꾸어 최적화를 하는 것이 바람직하다. */

	return 0;
}