/*
2.8강 "리터럴 상수(literal constants)"

1. 변수란?
- 변수란, 데이터를 임시로 저장할 메모리 공간을 의미한다.
- 변수는 선언과 동시 초기화, 선언 후 초기화 모두 가능한다.
  (상수는 const 선언할 때, 선언과 동시에 초기화해야 한다.)
- 변수는 프로그램이 종료될 때, 저장된 데이터가 사라진다.
- 변수 선언은 정수형, 실수형, 문자형, 문자열형으로 나누어야 한다.
- tip. 데이터란, 변수에 임시로 저장될 값을 데이터라고 한다. 
  만약, 변수가 초기화되지 않아 데이터가 저장되지 않는다면, 쓰레기 값이 들어간다.
- 변수는 초기화하고 나서 재정의가 가능하다. 
  변수는 말 그대로 임의로 저장된 메모리 공간에 지나지 않으므로, 그 속에 저장되는 데이터 값은 언제든 변환이 가능하다.

2. 상수란?
- 상수는 변환되지 않는 값을 말한다. 즉, 초기화가 되면, 다시 재정의가 불가능하다.
- 상수는 변환되지 않는 값 (pi, 3.14~)을 정의하여 반복적으로 사용하기 위해 쓰인다.
- 상수에 두 가지가 있다. literal 상수와 symbolic 상수가 있다.
- 상수도 자료형에 신경을 써야 한다.
- literal 상수는 글자 그대로 의미가 있어서, 이름이 따로 정의되지 않은 상수를 말한다.
- symbolic 상수는, 상수를 기호화하여 변수처럼 이름을 지어 쓰는 상수를 말한다.
*/
#include <iostream>

int main()
{
	using namespace std;

	/******* Topic 1 *******/
	float pi = 3.14f; // '3.14'와 같이 글자를 적어서 표현하는 상수를 literal이라고 함.
	/* 
	tip. float pi = 3.14와 같이 f를 안 붙이면 double로 간주됨 -> double이 float로 casting 돼서 pi에 들어간다는 뜻.
	f 대신에 u를 붙이면 unsigned, l(또는 L)을 붙이면 long double라는 의미.
	그러나 casting은 명확하게 표시해주는 것이 좋음. EX) int i = 12323u ==> int i = (unsigned int)12324
	*/

	/******* Topic 2 *******/
	/*
	Decimal(10진수)		: 0, 1, 2, 3, 4, 5, 6, 7, 8,  9,  10
	Octal(8진수)			: 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13
	Hexadecimal(16진수)	: 0, 1, 2, 3, 4, 5, 6, 7, 8,  9,  A,  B, C, D, E, F, 10
	*/

	// Ex.1) Octal
	int x = 012;	   // 8진수로 표현하고 싶을 경우에만 앞에 0을 붙여야 함. 
	cout << x << endl; // 실수로 앞에 0을 붙일 경우, 12가 출력되는 것이 아니라 8진수에서 12에 해당되는 10진수 10이 출력됨.

	// Ex.2) Hexadecimal
	int y = 0xF;	// 16진수로 표현하고 싶을 경우에는 앞에 0x를 붙임. 
	cout << y << endl; 	// 16진수에서 F에 해당되는 10진수 15가 출력됨. (cout은 10진수 출력이 기본)

	/* 
	10진수가 사람에게 가장 직관적이지만 2진수로 프로그래밍 해야 할 때가 있음.
	이때 2진수보다는 16진수로 표현하는 것이 편하므로 많이 사용됨.
	Ex, 0011 1010 1111 1111(2진수) = 3A7F(16진수)
 	*/

	/******* Topic 3 *******/
	/* C++ 14에 새로 추가된 Binary Literals
	2진수로 바로 입력이 가능하며, 작은따옴표를 무시하여 코드 읽을 때 편하게 되었음. */
	int z = 0b1010'1111'1010;
	cout << z << endl;

	/******* Topic 4 *******/
	/* Magic number 사용 지양하기 -> symbolic constants 이용. */

	// Case 1.
	int num_items = 123;
	int price = num_items * 10; // 10 is empirical value. (=Magic number).
	// 10에 대한 설명을 주석으로 적는다 하더라도 Magic number를 코드에 남겨놓을수록 장기적으로 볼수록 좋지 못함.

	// Case 2.
	const int price_per_item_ = 10; //symbolic constants(기호적 상수)
	int num_items_ = 123;
	int price_ = num_items_ * price_per_item_;

	return 0;
}